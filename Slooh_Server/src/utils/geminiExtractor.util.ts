// src/utils/geminiExtractor.util.ts
import { GoogleGenerativeAI } from '@google/generative-ai';
import config from '../config';

if (!config.google.apiKey) {
  throw new Error('Google API key is not configured');
}
const genAI = new GoogleGenerativeAI(config.google.apiKey);

interface ExtractedPage {
  loaiTrang: 'NOI_DUNG' | 'CAU_HOI';
  tieuDe: string;
  noiDung?: string;
  loaiCauTraLoi?: 'SINGLE_SELECT' | 'MULTI_SELECT' | 'TRUE_FALSE';
  danhSachLuaChon?: Array<{
    noiDung: string;
    ketQua: boolean;
  }>;
}

interface ExtractedRoomData {
  tenPhong: string;
  moTa: string;
  danhSachTrang: ExtractedPage[];
}

const systemPrompt = `
B·∫°n l√† m·ªôt AI chuy√™n gia trong vi·ªác t·∫°o n·ªôi dung h·ªçc t·∫≠p t·ª´ t√†i li·ªáu. 
Nhi·ªám v·ª• c·ªßa b·∫°n l√† ph√¢n t√≠ch n·ªôi dung ƒë∆∞·ª£c cung c·∫•p v√† t·∫°o ra m·ªôt c·∫•u tr√∫c ph√≤ng h·ªçc bao g·ªìm:

1. C√°c slide ki·∫øn th·ª©c (loaiTrang: "NOI_DUNG")
2. C√°c c√¢u h·ªèi ki·ªÉm tra (loaiTrang: "CAU_HOI") v·ªõi c√°c l·ª±a ch·ªçn

H∆Ø·ªöNG D·∫™N CHI TI·∫æT:

üìö SLIDE N·ªòI DUNG (loaiTrang: "NOI_DUNG"):
- M·ªói slide PH·∫¢I c√≥ ti√™u ƒë·ªÅ r√µ r√†ng (1-300 k√Ω t·ª±)
- N·ªôi dung chi ti·∫øt nh∆∞ng s√∫c t√≠ch (t·ªëi ƒëa 5000 k√Ω t·ª±)
- M·ªói slide t·∫≠p trung v√†o M·ªòT √Ω ch√≠nh
- Chia nh·ªè n·ªôi dung ph·ª©c t·∫°p th√†nh nhi·ªÅu slide
- KH√îNG c√≥ danhSachLuaChon cho lo·∫°i n√†y

‚ùì C√ÇU H·ªéI KI·ªÇM TRA (loaiTrang: "CAU_HOI"):
- Ti√™u ƒë·ªÅ l√† c√¢u h·ªèi (1-300 k√Ω t·ª±)
- PH·∫¢I c√≥ loaiCauTraLoi: "SINGLE_SELECT", "MULTI_SELECT", ho·∫∑c "TRUE_FALSE"
- S·ªë l∆∞·ª£ng l·ª±a ch·ªçn:
  * SINGLE_SELECT: 2-10 l·ª±a ch·ªçn, CH·ªà 1 ƒë√°p √°n ƒë√∫ng
  * MULTI_SELECT: 2-10 l·ª±a ch·ªçn, √≠t nh·∫•t 1 ƒë√°p √°n ƒë√∫ng
  * TRUE_FALSE: CH√çNH X√ÅC 2 l·ª±a ch·ªçn (ƒê√∫ng/Sai)
- M·ªói l·ª±a ch·ªçn: noiDung (1-500 k√Ω t·ª±), ketQua (true/false)
- Th·ªùi gian m·∫∑c ƒë·ªãnh: 30 gi√¢y (s·∫Ω ƒë∆∞·ª£c h·ªá th·ªëng t·ª± ƒë·ªông th√™m)

üìä S·ªê L∆Ø·ª¢NG V√Ä C√ÇN B·∫∞NG:
- T·ªëi thi·ªÉu 3-5 c√¢u h·ªèi, c√≥ th·ªÉ nhi·ªÅu h∆°n t√πy ƒë·ªô d√†i t√†i li·ªáu
- T·ª∑ l·ªá ƒë·ªÅ xu·∫•t: 70% n·ªôi dung, 30% c√¢u h·ªèi
- ƒêa d·∫°ng lo·∫°i c√¢u h·ªèi (kh√¥ng ch·ªâ d√πng SINGLE_SELECT)
- C√¢u h·ªèi ph·∫£i ki·ªÉm tra ƒë∆∞·ª£c ki·∫øn th·ª©c quan tr·ªçng

üéØ Y√äU C·∫¶U B·∫ÆT BU·ªòC:
1. M·ªói trang PH·∫¢I c√≥ ti√™u ƒë·ªÅ kh√°c nhau
2. C√¢u h·ªèi PH·∫¢I li√™n quan tr·ª±c ti·∫øp ƒë·∫øn n·ªôi dung ƒë√£ h·ªçc
3. PH·∫¢I c√≥ √≠t nh·∫•t 1 c√¢u h·ªèi cho m·ªói kh√°i ni·ªám quan tr·ªçng
4. S·ª≠ d·ª•ng ti·∫øng Vi·ªát r√µ r√†ng, d·ªÖ hi·ªÉu
5. Tr√°nh l·∫∑p l·∫°i n·ªôi dung gi·ªØa c√°c slide

üìã C·∫§U TR√öC JSON TR·∫¢ V·ªÄ:
{
  "moTa": "M√¥ t·∫£ ng·∫Øn g·ªçn v·ªÅ n·ªôi dung ph√≤ng h·ªçc (t·ªëi ƒëa 1000 k√Ω t·ª±)",
  "danhSachTrang": [
    {
      "loaiTrang": "NOI_DUNG",
      "tieuDe": "Ti√™u ƒë·ªÅ slide ki·∫øn th·ª©c",
      "noiDung": "N·ªôi dung chi ti·∫øt c·ªßa slide"
    },
    {
      "loaiTrang": "CAU_HOI",
      "tieuDe": "C√¢u h·ªèi c·∫ßn tr·∫£ l·ªùi?",
      "loaiCauTraLoi": "SINGLE_SELECT",
      "danhSachLuaChon": [
        {"noiDung": "L·ª±a ch·ªçn A", "ketQua": false},
        {"noiDung": "L·ª±a ch·ªçn B", "ketQua": true},
        {"noiDung": "L·ª±a ch·ªçn C", "ketQua": false},
        {"noiDung": "L·ª±a ch·ªçn D", "ketQua": false}
      ]
    },
    {
      "loaiTrang": "CAU_HOI",
      "tieuDe": "Ch·ªçn T·∫§T C·∫¢ ƒë√°p √°n ƒë√∫ng:",
      "loaiCauTraLoi": "MULTI_SELECT",
      "danhSachLuaChon": [
        {"noiDung": "ƒê√°p √°n 1", "ketQua": true},
        {"noiDung": "ƒê√°p √°n 2", "ketQua": false},
        {"noiDung": "ƒê√°p √°n 3", "ketQua": true},
        {"noiDung": "ƒê√°p √°n 4", "ketQua": false}
      ]
    },
    {
      "loaiTrang": "CAU_HOI",
      "tieuDe": "Kh·∫≥ng ƒë·ªãnh n√†y ƒë√∫ng hay sai?",
      "loaiCauTraLoi": "TRUE_FALSE",
      "danhSachLuaChon": [
        {"noiDung": "ƒê√∫ng", "ketQua": true},
        {"noiDung": "Sai", "ketQua": false}
      ]
    }
  ]
}

‚ö†Ô∏è L∆ØU √ù QUAN TR·ªåNG:
- KH√îNG th√™m c√°c tr∆∞·ªùng kh√¥ng c·∫ßn thi·∫øt nh∆∞ thuTu, diem, thoiGianGioiHan
- ƒê·ª™NG t·∫°o danhSachLuaChon cho loaiTrang "NOI_DUNG"
- KI·ªÇM TRA k·ªπ s·ªë l∆∞·ª£ng l·ª±a ch·ªçn cho t·ª´ng lo·∫°i c√¢u h·ªèi
- ƒê·∫¢M B·∫¢O m·ªói c√¢u h·ªèi c√≥ √≠t nh·∫•t 1 ƒë√°p √°n ƒë√∫ng
`;

// Enhanced prompt function with better context
export const generateRoomDataFromContent = async (
  content: string,
  roomName: string,
  userPrompt: string
): Promise<ExtractedRoomData | null> => {
  try {
    console.log('Starting room data generation with Gemini...');
    console.log('Content length:', content.length);
    console.log('Room name:', roomName);
    console.log('User prompt:', userPrompt);

    const model = genAI.getGenerativeModel({
      model: 'gemini-1.5-flash',
      generationConfig: {
        temperature: 0.7,
        topK: 40,
        topP: 0.95,
        maxOutputTokens: 8192,
        responseMimeType: 'application/json'
      }
    });

    // Enhanced prompt with better structure
    const prompt = `
${systemPrompt}

üéØ Y√äU C·∫¶U C·ª§ TH·ªÇ T·ª™ NG∆Ø·ªúI D√ôNG:
${userPrompt}

üìå TH√îNG TIN PH√íNG H·ªåC:
- T√™n ph√≤ng: ${roomName}
- M·ª•c ti√™u: T·∫°o n·ªôi dung h·ªçc t·∫≠p c√≥ c·∫•u tr√∫c, d·ªÖ hi·ªÉu v√† c√≥ c√¢u h·ªèi ki·ªÉm tra ph√π h·ª£p

üìÑ N·ªòI DUNG T√ÄI LI·ªÜU C·∫¶N PH√ÇN T√çCH:
${content}

‚ö° H√ÄNH ƒê·ªòNG:
H√£y ph√¢n t√≠ch t√†i li·ªáu tr√™n v√† t·∫°o c·∫•u tr√∫c ph√≤ng h·ªçc theo format JSON ƒë√£ ch·ªâ ƒë·ªãnh.
∆Øu ti√™n y√™u c·∫ßu t·ª´ ng∆∞·ªùi d√πng trong vi·ªác t·∫°o n·ªôi dung v√† c√¢u h·ªèi.
ƒê·∫£m b·∫£o t·∫•t c·∫£ c√°c quy t·∫Øc validation ƒë∆∞·ª£c tu√¢n th·ªß.
`;

    const result = await model.generateContent(prompt);
    const response = await result.response;
    const text = response.text();

    try {
      const parsedData = JSON.parse(text);

      // Enhanced validation and data cleaning
      const roomData: ExtractedRoomData = {
        tenPhong: roomName,
        moTa: parsedData.moTa?.substring(0, 1000) || 'Ph√≤ng h·ªçc ƒë∆∞·ª£c t·∫°o t·ª´ t√†i li·ªáu',
        danhSachTrang: parsedData.danhSachTrang.map((trang: any, index: number) => {
          // Basic validation
          if (!trang.loaiTrang || !['NOI_DUNG', 'CAU_HOI'].includes(trang.loaiTrang)) {
            throw new Error(`Invalid loaiTrang at index ${index}`);
          }

          // Clean and validate title
          const tieuDe = (trang.tieuDe || '').trim().substring(0, 300);
          if (!tieuDe) {
            throw new Error(`Empty title at index ${index}`);
          }

          // Build page object
          const pageData: any = {
            loaiTrang: trang.loaiTrang,
            tieuDe: tieuDe,
            thuTu: index + 1,
            diem: 'BINH_THUONG'
          };

          if (trang.loaiTrang === 'NOI_DUNG') {
            // Content page
            pageData.noiDung = (trang.noiDung || '').substring(0, 5000);
            // Ensure no choices for content pages
            pageData.danhSachLuaChon = [];
          } else {
            // Question page
            pageData.thoiGianGioiHan = 30;
            pageData.loaiCauTraLoi = trang.loaiCauTraLoi || 'SINGLE_SELECT';

            // Validate question type
            if (!['SINGLE_SELECT', 'MULTI_SELECT', 'TRUE_FALSE'].includes(pageData.loaiCauTraLoi)) {
              pageData.loaiCauTraLoi = 'SINGLE_SELECT';
            }

            // Validate choices
            if (!Array.isArray(trang.danhSachLuaChon) || trang.danhSachLuaChon.length < 2) {
              throw new Error(`Invalid choices for question at index ${index}`);
            }

            // Clean and validate each choice
            pageData.danhSachLuaChon = trang.danhSachLuaChon.map((luaChon: any) => ({
              noiDung: (luaChon.noiDung || '').trim().substring(0, 500),
              ketQua: Boolean(luaChon.ketQua)
            }));

            // Validate choice count based on type
            const choiceCount = pageData.danhSachLuaChon.length;
            if (pageData.loaiCauTraLoi === 'TRUE_FALSE' && choiceCount !== 2) {
              throw new Error(`TRUE_FALSE question must have exactly 2 choices at index ${index}`);
            }
            if (choiceCount > 10) {
              pageData.danhSachLuaChon = pageData.danhSachLuaChon.slice(0, 10);
            }

            // Validate correct answers
            const correctAnswers = pageData.danhSachLuaChon.filter((c: any) => c.ketQua).length;
            if (correctAnswers === 0) {
              // Force at least one correct answer
              pageData.danhSachLuaChon[0].ketQua = true;
            }

            // For SINGLE_SELECT, ensure only one correct answer
            if (pageData.loaiCauTraLoi === 'SINGLE_SELECT' && correctAnswers > 1) {
              // Keep only the first correct answer
              let foundFirst = false;
              pageData.danhSachLuaChon = pageData.danhSachLuaChon.map((c: any) => {
                if (c.ketQua && foundFirst) {
                  return { ...c, ketQua: false };
                }
                if (c.ketQua) {
                  foundFirst = true;
                }
                return c;
              });
            }
          }

          return pageData;
        })
      };

      // Final validation
      if (roomData.danhSachTrang.length === 0) {
        throw new Error('No pages generated');
      }

      // Check if we have at least one question
      const questionCount = roomData.danhSachTrang.filter(t => t.loaiTrang === 'CAU_HOI').length;
      if (questionCount === 0) {
        console.warn('Warning: No questions generated. Consider adjusting the prompt.');
      }

      return roomData;
    } catch (parseError) {
      console.error('Error parsing Gemini response:', parseError);
      console.error('Raw response:', text);
      return null;
    }
  } catch (error) {
    console.error('Error generating room data with Gemini:', error);
    return null;
  }
};